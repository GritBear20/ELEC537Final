#include "ns3/core-module.h"
#include "ns3/propagation-module.h"
#include "ns3/network-module.h"
#include "ns3/applications-module.h"
#include "ns3/mobility-module.h"
#include "ns3/internet-module.h"
#include "ns3/flow-monitor-module.h"
#include "ns3/wifi-module.h"
#include <math.h>
#include <string.h>
#include <sstream>

using namespace std;
using namespace ns3;

/// Run single experiment with enabled or disabled RTS/CTS mechanism
double experiment (bool enableCtsRts, double radius, int dataRateBPS, int simulationTime, int packetSize)
{
  // 0. Enable or disable CTS/RTS
  UintegerValue ctsThr = (enableCtsRts ? UintegerValue (100) : UintegerValue (2200));
  Config::SetDefault ("ns3::WifiRemoteStationManager::RtsCtsThreshold", ctsThr);

  // 1. Create 3 nodes 
  NodeContainer nodes;
  nodes.Create (3);

  // 2. Place nodes somehow, this is required by every wireless simulation
  for (int i = 0; i < 3; ++i)
    {
      nodes.Get (i)->AggregateObject (CreateObject<ConstantPositionMobilityModel> ());
        if(i>0){
                nodes.Get(i)->GetObject<MobilityModel>()->SetPosition(Vector(cos((i-1)*2*3.14159265/2.0)*radius,
			sin((i-1)*2*3.14159265/2.0)*radius,0.0));
        }else{
                nodes.Get(0)->GetObject<MobilityModel>()->SetPosition(Vector(0.0,0.0,0.0));
        }
    }

  // 3. Create propagation loss matrix
  YansWifiChannelHelper wifiHelper = YansWifiChannelHelper::Default();
  Ptr<YansWifiChannel> wifiChannel = wifiHelper.Create();

  // 5. Install wireless devices
  WifiHelper wifi;
  wifi.SetStandard (WIFI_PHY_STANDARD_80211b);
  wifi.SetRemoteStationManager ("ns3::ConstantRateWifiManager", 
                                "DataMode",StringValue ("DsssRate2Mbps"), 	//data rate per node
                                "ControlMode",StringValue ("DsssRate1Mbps"));	//RTS/CTS
  YansWifiPhyHelper wifiPhy =  YansWifiPhyHelper::Default ();
  wifiPhy.SetChannel (wifiChannel);
  NqosWifiMacHelper wifiMac = NqosWifiMacHelper::Default ();
  wifiMac.SetType ("ns3::AdhocWifiMac"); // use ad-hoc MAC
  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, nodes);
  //NetDeviceContainer devices = wifi.InstallLLT (wifiPhy, wifiMac, nodes, 0, 4);

  // uncomment the following to have athstats output
  // AthstatsHelper athstats;
  // athstats.EnableAthstats(enableCtsRts ? "basic-athstats-node" : "rtscts-athstats-node", nodes);

  // uncomment the following to have pcap output
  //wifiPhy.EnablePcap (enableCtsRts ? "basic-pcap-node" : "rtscts-pcap-node", nodes);


  // 6. Install TCP/IP stack & assign IP addresses
  InternetStackHelper internet;
  internet.Install (nodes);
  Ipv4AddressHelper ipv4;
  ipv4.SetBase ("10.0.0.0", "255.0.0.0");
  ipv4.Assign (devices);

  // 7. Install applications: two CBR streams each saturating the channel 
  ApplicationContainer cbrApps;
  uint16_t cbrPort = 12345;
  OnOffHelper onOffHelper ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address ("10.0.0.1"), cbrPort));
  onOffHelper.SetAttribute ("PacketSize", UintegerValue (packetSize));
  onOffHelper.SetAttribute ("OnTime",  StringValue ("ns3::ConstantRandomVariable[Constant=1]"));
  onOffHelper.SetAttribute ("OffTime", StringValue ("ns3::ConstantRandomVariable[Constant=0]"));

  // flow 1~12:  node 1~12 -> node 0
  for(int i=1; i < 3; i++ )
  {
        stringstream sstr ("");
    	sstr << (dataRateBPS + 10 * (i-6)); //to make sure the average is still dataRateBPS
	string speedValue = sstr.str();
    	speedValue += "bps";

        onOffHelper.SetAttribute ("DataRate", StringValue (speedValue));
        onOffHelper.SetAttribute ("StartTime", TimeValue (Seconds (1.000000+0.001*(i-1))));
        cbrApps.Add (onOffHelper.Install (nodes.Get (i))); 
  }

  /** \internal
   * We also use separate UDP applications that will send a single
   * packet before the CBR flows start. 
   * This is a workaround for the lack of perfect ARP, see \bugid{187}
   */
  uint16_t  echoPort = 9;
  UdpEchoClientHelper echoClientHelper (Ipv4Address ("10.0.0.1"), echoPort);
  echoClientHelper.SetAttribute ("MaxPackets", UintegerValue (1));
  echoClientHelper.SetAttribute ("Interval", TimeValue (Seconds (0.1)));
  echoClientHelper.SetAttribute ("PacketSize", UintegerValue (10));
  ApplicationContainer pingApps;

  // again using different start times to workaround Bug 388 and Bug 912
 // echoClientHelper.SetAttribute ("StartTime", TimeValue (Seconds (0.001)));
 // pingApps.Add (echoClientHelper.Install (nodes.Get (1))); 
 // echoClientHelper.SetAttribute ("StartTime", TimeValue (Seconds (0.006)));
 // pingApps.Add (echoClientHelper.Install (nodes.Get (2)));
  for(size_t i=1;i<3;i++)
  { echoClientHelper.SetAttribute ("StartTime", TimeValue (Seconds (0.001+0.005*(i-1))));
    pingApps.Add (echoClientHelper.Install (nodes.Get (i)));

  }

  // 8. Install FlowMonitor on all nodes
  FlowMonitorHelper flowmon;
  Ptr<FlowMonitor> monitor = flowmon.InstallAll ();


for (int i = 0; i < 3; ++i)
{
    std::cout<<nodes.Get(i)->GetDevice(0)->GetAddress()<< "is number: "<< i << "\n";
}

  // 9. Run simulation for 50 seconds
  Simulator::Stop (Seconds (simulationTime));
  Simulator::Run ();

  // 10. Print per flow statistics
  monitor->CheckForLostPackets ();
  Ptr<Ipv4FlowClassifier> classifier = DynamicCast<Ipv4FlowClassifier> (flowmon.GetClassifier ());
  std::map<FlowId, FlowMonitor::FlowStats> stats = monitor->GetFlowStats ();
  
  double totalReceived = 0;
  double totalTransimited =0;
  for (std::map<FlowId, FlowMonitor::FlowStats>::const_iterator i = stats.begin (); i != stats.end (); ++i)
    {

      // first 2 FlowIds are for ECHO apps, we don't want to display them
      if (i->first > 2)
        {
          //Ipv4FlowClassifier::FiveTuple t = classifier->FindFlow (i->first);
          //std::cout << "Flow " << i->first - 12 << " (" << t.sourceAddress << " -> " << t.destinationAddress << ")\n";
          //std::cout << "  Tx Bytes:   " << i->second.txBytes << "\n";
	  totalTransimited += i->second.txBytes;
          //std::cout << "  Rx Bytes:   " << i->second.rxBytes << "\n";
	  totalReceived += i->second.rxBytes;
          //std::cout << "  Throughput: " << i->second.rxBytes * 8.0 / (double)simulationTime / 1000 / 1000  << " Mbps\n";
        }
    }

  double normalThroughtput = (double)(totalReceived * 8.0 / (double)simulationTime / 1000.0 / 1000.0)/2.0;
  //std::cout << "Average Tx Bytes Per Flow:   " << (int)(totalTransimited/12.0 + 0.5) << "\n"; 
  //std::cout << "Average Rx Bytes Per Flow:   " << (int)(totalReceived/12.0 + 0.5) << "\n";
  //std::cout << "Normalized Average Throughput (y-axis):   " << normalThroughtput << "\n";

  // 11. Cleanup
  Simulator::Destroy ();
  return normalThroughtput;
}

double  normalizedTotalCarriedload_xaxis(double dataRateBPS){
	double aggreatedDataRate = dataRateBPS * 12;
	double possibleNumber = 2000000; //2Mbps as defined in the experiment
	return aggreatedDataRate/possibleNumber;
}

void outputSimulationParameter(double radius, int dataRateBPS, int simulationTime, int packetSize){
	std::cout << "Node Distance(M): "<< ((int)radius) << "; DataRate(BPS): " <<dataRateBPS << "; Time: " <<simulationTime<<"; Packet size: "<<packetSize<< "\n";
}

int main (int argc, char **argv)
{
  double x;
  double y;
  int dataRate;
  int dataRateList[10]  = {1000,10000,50000,100000,250000,500000,1000000,3000000,6000000,12000000};
  SeedManager::SetRun (3);  // Changes run number from default of 1 to 7
  
  for(int i = 2; i < 6; i++){
  	dataRate = dataRateList[i];
	  outputSimulationParameter(80, dataRate, 5,1000);
	  //void experiment (bool enableCtsRts, double radius, int dataRateBPS, int simulationTime, int packetSize)
	  y = experiment (true, 80, dataRate, 5,1000);
	  x = normalizedTotalCarriedload_xaxis(dataRate);
	  std::cout << "X-axis: " << x << " ;Y-axis: " << y << "\n";
          std::cout << "------------------------------------------------\n";
  }
/*
  std::cout << "------------------------------------------------\n";
  std::cout << "RTS/CTS enabled:\n";
  outputSimulationParameter(5, dataRate, 50,1000);
  y = experiment (true, 5, dataRate, 50,1000);
  x = normalizedTotalCarriedload_xaxis(dataRate);
  std::cout << "X-axis: " << x << " ;Y-axis: " << y << "\n";
*/
  return 0;
}
